package kr.happyjob.study.delcus.controller;

import java.util.List;
import java.util.Map;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.study.delcus.model.DelCusModel;
import kr.happyjob.study.delcus.service.DelCusService;

@Controller
@RequestMapping("/delcus/")
public class DelCusController {
	
	@Autowired
	DelCusService delCusService;

	// Set logger
	private final Logger logger = LogManager.getLogger(this.getClass());

	// Get class name for logger
	private final String className = this.getClass().toString();

/* ##########################################[배송지시서]########################################## */	

	// 0. 배송지시서 단순 네비게이션
	@RequestMapping("delcusDirection.do")
	public String delcusDirection() throws Exception {
		logger.info("Start " + className + ".delcusDirection");
		logger.info("End " + className + ".delcusDirection");
		return "delcus/delcusDirection";
	}
	
	// 1. Delivery 리스트 조회
	@RequestMapping("delList.do")
	public String delList(@RequestParam Map<String, Object> map, Model model) throws Exception {
		logger.info("Start " + className + ".delList");
		
		int currentPage = Integer.parseInt((String)map.get("currentPage"));	
		int pageSize = Integer.parseInt((String)map.get("pageSize"));	
		int pageIndex = (currentPage-1)*pageSize;	
		
		map.put("pageIndex", pageIndex);
		map.put("pageSize", pageSize);
		
		List<DelCusModel> list = delCusService.delList(map);
		model.addAttribute("list", list);
		
		int totalCount = delCusService.countDel();
		model.addAttribute("currentPage", currentPage);
		model.addAttribute("totalCount", totalCount);

		logger.info("End " + className + ".delList");
		return "delcus/delcusDirectionList";
	}
		
	// 2. Delivery 단 건 조회
	@RequestMapping("delDelList.do")
	@ResponseBody
	public List<DelCusModel> delSelectOne(Model model, @RequestParam("coNo") int coNo) throws Exception {
		
		logger.info("Start " + className + ".delSelectOne");
		
		List<DelCusModel> list = delCusService.delSelectOne(coNo);
		model.addAttribute("list", list);
		
		logger.info("End " + className + ".delSelectOne");

		return list;
	}
	
	// 3. Delivery 상태 변경
	@RequestMapping("deliverySts.do")
	@ResponseBody
	public List<DelCusModel> deliverySts(@RequestParam("delNo") int delNo) throws Exception{
		
		logger.info("Start " + className + ".deliverySts");
		
		delCusService.deliverySts(delNo);		
		List<DelCusModel> list = delCusService.delSelectOne(delNo);
		
		logger.info("Start " + className + ".deliverySts");
		
		return list;
	}

/* ##########################################[반품지시서]########################################## */
	
	// 0. 반품지시서 단순 네비게이션
		@RequestMapping("delcusReturn.do")
		public String delcusReturn() throws Exception {
			logger.info("Start " + className + ".delcusDirection");
			logger.info("End " + className + ".delcusDirection");
			return "delcus/delcusReturn";
		}
	               
}
